
R Under development (unstable) (2016-08-12 r71089) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("age")
> ### * age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: age
> ### Title: Calculate isotopic ages
> ### Aliases: age age.ArAr age.UPb age.UThHe age.default age.detritals
> ###   age.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> print(age(examples$UPb))
        t.75 s[t.75]   t.68 s[t.68]  t.76 s[t.76] t.conc s[t.conc]
 [1,] 252.16    0.33 251.90    0.28 253.7     2.6 251.98      0.27
 [2,] 251.77    0.75 251.59    0.28 252.4     7.4 251.60      0.28
 [3,] 251.77    0.68 251.47    0.63 253.7     4.0 251.57      0.62
 [4,] 251.61    0.51 251.35    0.34 252.9     4.4 251.38      0.33
 [5,] 251.77    0.38 251.10    0.28 257.3     3.2 251.24      0.27
 [6,] 251.53    0.66 251.04    0.63 255.1     3.6 251.23      0.62
 [7,] 251.69    0.56 250.79    0.28 259.1     5.2 250.86      0.28
 [8,] 251.45    0.48 250.73    0.40 257.3     3.6 250.89      0.39
 [9,] 251.93    0.38 251.22    0.28 257.8     3.2 251.37      0.27
[10,] 230.95    0.37 228.43    0.33 255.5     2.6 229.28      0.32
> print(age(examples$UPb,concordia=1))
        t.75 s[t.75]   t.68 s[t.68]  t.76 s[t.76] t.conc s[t.conc]
 [1,] 252.16    0.33 251.90    0.28 253.7     2.6 251.98      0.27
 [2,] 251.77    0.75 251.59    0.28 252.4     7.4 251.60      0.28
 [3,] 251.77    0.68 251.47    0.63 253.7     4.0 251.57      0.62
 [4,] 251.61    0.51 251.35    0.34 252.9     4.4 251.38      0.33
 [5,] 251.77    0.38 251.10    0.28 257.3     3.2 251.24      0.27
 [6,] 251.53    0.66 251.04    0.63 255.1     3.6 251.23      0.62
 [7,] 251.69    0.56 250.79    0.28 259.1     5.2 250.86      0.28
 [8,] 251.45    0.48 250.73    0.40 257.3     3.6 250.89      0.39
 [9,] 251.93    0.38 251.22    0.28 257.8     3.2 251.37      0.27
[10,] 230.95    0.37 228.43    0.33 255.5     2.6 229.28      0.32
> print(age(examples$UPb,concordia=2))
$x
 Pb207U235  Pb206U238 
0.27913440 0.03941493 

$cov
             Pb207U235    Pb206U238
Pb207U235 2.233412e-08 1.610024e-09
Pb206U238 1.610024e-09 2.270768e-10

$age
[1] 249.4722

$age.err
[1] 0.141713

$mswd
$mswd$equivalence
         [,1]
[1,] 260.2127

$mswd$concordance
         [,1]
[1,] 10.93234


$p.value
$p.value$equivalence
     [,1]
[1,]    0

$p.value$concordance
             [,1]
[1,] 0.0009449995


> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("agespectrum")
> ### * agespectrum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: agespectrum
> ### Title: Plot a (^{40}Ar/^{39}Ar) release spectrum
> ### Aliases: agespectrum agespectrum.ArAr agespectrum.default
> 
> ### ** Examples
> 
> data(examples)
> agespectrum(examples$ArAr,ylim=c(0,80))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("agespectrum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("botev")
> ### * botev
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: botev
> ### Title: Compute the optimal kernel bandwidth
> ### Aliases: botev
> 
> ### ** Examples
> 
> data(examples)
> samp <- examples$DZ[['N1']]
> bw <- botev(samp)
> print(bw)
[1] 53.7377
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("botev", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cad")
> ### * cad
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cad
> ### Title: Plot continuous data as cumulative age distributions
> ### Aliases: cad cad.ArAr cad.UPb cad.UThHe cad.default cad.detritals
> ###   cad.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> cad(examples$DZ,verticals=FALSE,pch=20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cad", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("central")
> ### * central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: central
> ### Title: Calculate U-Th-He (and fission track) central ages and
> ###   compositions
> ### Aliases: central central.UThHe central.default
> 
> ### ** Examples
> 
> data(examples)
> print(central(examples$UThHe)$age)
         U            
6.40800509 0.05909253 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia")
> ### * concordia
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia
> ### Title: Concordia diagram
> ### Aliases: concordia
> 
> ### ** Examples
> 
> data(examples)
> concordia(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("examples")
> ### * examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: examples
> ### Title: Example datasets for testing 'IsoplotR'
> ### Aliases: examples
> 
> ### ** Examples
> 
> data(examples)
> concordia(examples$UPb)
> dev.new()
> kde(examples$DZ)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("helioplot")
> ### * helioplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: helioplot
> ### Title: Visualise U-Th-He data on a logratio plot or ternary diagram
> ### Aliases: helioplot
> 
> ### ** Examples
> 
> data(examples)
> helioplot(examples$UThHe)
> dev.new()
dev.new(): using pdf(file="Rplots1.pdf")
> helioplot(examples$UThHe,logratio=FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("helioplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("iratio")
> ### * iratio
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: iratio
> ### Title: Isotopic ratios
> ### Aliases: iratio
> 
> ### ** Examples
> 
> # returns the 238U/235U ratio of Hiess et al. (2012):
> print(iratio('U238U235'))
[1] 137.8180   0.0225
> # use the 238U/235U ratio of Steiger and Jaeger (1977):
> iratio('U238U235',138.88,0)
> print(iratio('U238U235'))
[1] 138.88   0.00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("iratio", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isochron")
> ### * isochron
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isochron
> ### Title: Calculate and plot isochrons
> ### Aliases: isochron isochron.ArAr isochron.default
> 
> ### ** Examples
> 
> data(examples)
> isochron(examples$ArAr)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isochron", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde")
> ### * kde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde
> ### Title: Create (a) kernel density estimate(s)
> ### Aliases: kde kde.ArAr kde.UPb kde.UThHe kde.default kde.detritals
> ###   kde.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> kde(examples$DZ[['N1']],kernel="epanechnikov")
> kde(examples$DZ,from=0,to=3000)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lambda")
> ### * lambda
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lambda
> ### Title: Decay constants
> ### Aliases: lambda
> 
> ### ** Examples
> 
> print(lambda('U238'))
[1] 0.000155125 0.000000083
> # use the decay constant of Kovarik and Adams (1932)
> lambda('U238',0.0001537,0.0000068)
> print(lambda('U238'))
[1] 0.0001537 0.0000068
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lambda", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mds")
> ### * mds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mds
> ### Title: Multidimensional Scaling
> ### Aliases: mds mds.default mds.detritals
> 
> ### ** Examples
> 
> data(examples)
> # Parameters 'xaxt' and 'yaxt' control if the axis is plotted at all.
> mds(examples$DZ,nnlines=TRUE,cex=5,xaxt='n',yaxt='n')
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
NULL
> dev.new()
dev.new(): using pdf(file="Rplots2.pdf")
> mds(examples$DZ,shepard=TRUE)
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radialplot")
> ### * radialplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radialplot
> ### Title: Visualise heteroscedastic data on a radial plot
> ### Aliases: radialplot radialplot.ArAr radialplot.UPb radialplot.UThHe
> ###   radialplot.default radialplot.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> radialplot(examples$FT)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radialplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.data")
> ### * read.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.data
> ### Title: Read geochronology data
> ### Aliases: read.data read.data.default read.data.matrix
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> data(examples)
> concordia(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("settings")
> ### * settings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: settings
> ### Title: Load settings to and from json
> ### Aliases: settings
> 
> ### ** Examples
> 
> json <- system.file("defaults.json",package="IsoplotR")
> settings(json)
Warning in file(con, "r") :
  file("") only supports open = "w+" and open = "w+b": using the former
> print(settings())
[1] "{\"lambda\":null,\"iratio\":null}"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("settings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weightedmean")
> ### * weightedmean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weightedmean
> ### Title: Calculate the weighted mean age
> ### Aliases: weightedmean weightedmean.ArAr weightedmean.UPb
> ###   weightedmean.UThHe weightedmean.default weightedmean.fissiontracks
> 
> ### ** Examples
> 
> ages <- c(251.9,251.59,251.47,251.35,251.1,251.04,250.79,250.73,251.22,228.43)
> errs <- c(0.28,0.28,0.63,0.34,0.28,0.63,0.28,0.4,0.28,0.33)
> weightedmean(cbind(ages,errs))
> #data(examples)
> #weightedmean(examples$ArAr)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weightedmean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("yorkfit")
> ### * yorkfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: yorkfit
> ### Title: Linear regression of X,Y-variables with correlated errors
> ### Aliases: yorkfit
> 
> ### ** Examples
> 
>    X <- c(1.550,12.395,20.445,20.435,20.610,24.900,
+           28.530,50.540,51.595,86.51,106.40,157.35)
>    Y <- c(.7268,.7849,.8200,.8156,.8160,.8322,
+           .8642,.9584,.9617,1.135,1.230,1.490)
>    n <- length(X)
>    sX <- X*0.01
>    sY <- Y*0.005
>    rXY <- rep(0.8,n)
>    fit <- yorkfit(X,Y,sX,sY,rXY)
>    covmat <- matrix(0,2,2)
>    plot(range(X),fit$a[1]+fit$b[1]*range(X),type='l',ylim=range(Y))
>    for (i in 1:n){
+        covmat[1,1] <- sX[i]^2
+        covmat[2,2] <- sY[i]^2
+        covmat[1,2] <- rXY[i]*sX[i]*sY[i]
+        covmat[2,1] <- covmat[1,2]
+        ell <- ellipse(X[i],Y[i],covmat,alpha=0.05)
+        polygon(ell)
+    }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("yorkfit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.792 0.056 5.882 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
