
R Under development (unstable) (2016-01-21 r69971) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("I.R")
> ### * I.R
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: I.R
> ### Title: Isotopic ratios
> ### Aliases: I.R
> 
> ### ** Examples
> 
> # returns the 238U/235U ratio of Hiess et al. (2012):
> print(I.R('U238U235'))
[1] 137.8180   0.0225
> # use the 238U/235U ratio of Steiger and Jaeger (1977):
> I.R('U238U235',138.88,0)
> print(I.R('U238U235'))
[1] 138.88   0.00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("I.R", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("UPb")
> ### * UPb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: UPb
> ### Title: An example U-Pb dataset
> ### Aliases: UPb
> 
> ### ** Examples
> 
> data(UPb)
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("UPb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia.age")
> ### * concordia.age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia.age
> ### Title: Calculate U-Pb concordia ages
> ### Aliases: concordia.age
> 
> ### ** Examples
> 
> data(UPb)
> fit <- concordia.age(UPb)
> print(paste('age = ',fit$age,'+/-',fit$age.err,'Ma, MSWD = ',fit$mswd))
[1] "age =  249.47208516846 +/- 0.141708201144801 Ma, MSWD =  260.208819049681"
[2] "age =  249.47208516846 +/- 0.141708201144801 Ma, MSWD =  10.9242746182832"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia.age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia.plot")
> ### * concordia.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia.plot
> ### Title: Concordia diagram
> ### Aliases: concordia.plot
> 
> ### ** Examples
> 
> data(UPb)
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lambda")
> ### * lambda
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lambda
> ### Title: Decay constants
> ### Aliases: lambda
> 
> ### ** Examples
> 
> print(lambda('U238'))
[1] 0.000155125 0.000000083
> # use the decay constant of Kovarik and Adams (1932)
> lambda('U238',0.0001537,0.0000068)
> print(lambda('U238'))
[1] 0.0001537 0.0000068
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lambda", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.data")
> ### * read.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.data
> ### Title: Read geochronology data
> ### Aliases: read.data
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> fname <- system.file("UPb.csv",package="IsoplotR")
> UPb <- read.data(fname,'U-Pb')
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.matrix")
> ### * read.matrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.matrix
> ### Title: Read geochronology data
> ### Aliases: read.matrix
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> fname <- system.file("UPb.csv",package="IsoplotR")
> dat <- read.csv(fname,header=TRUE)
> UPb <- read.matrix(dat,method='U-Pb',format=1)
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.matrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("settings")
> ### * settings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: settings
> ### Title: Load settings to and from json
> ### Aliases: settings
> 
> ### ** Examples
> 
> json <- system.file("defaults.json",package="IsoplotR")
> settings(json)
Warning in file(con, "r") :
  file("") only supports open = "w+" and open = "w+b": using the former
> print(settings())
[1] "{\"lambda\":null,\"I.R\":null}"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("settings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.472 0.176 0.467 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
