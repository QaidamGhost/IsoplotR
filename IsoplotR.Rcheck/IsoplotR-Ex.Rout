
R Under development (unstable) (2016-01-21 r69971) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("I.R")
> ### * I.R
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: I.R
> ### Title: Isotopic ratios
> ### Aliases: I.R
> 
> ### ** Examples
> 
> # returns the 238U/235U ratio of Hiess et al. (2012):
> print(I.R('U238U235'))
[1] 137.8180   0.0225
> # use the 238U/235U ratio of Steiger and Jaeger (1977):
> I.R('U238U235',138.88,0)
> print(I.R('U238U235'))
[1] 138.88   0.00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("I.R", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("botev")
> ### * botev
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: botev
> ### Title: Compute the optimal kernel bandwidth
> ### Aliases: botev
> 
> ### ** Examples
> 
> data(examples)
> samp <- examples$DZ[['N1']]
> bw <- botev(samp)
> print(bw)
[1] 53.7377
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("botev", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia.age")
> ### * concordia.age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia.age
> ### Title: Calculate U-Pb concordia ages
> ### Aliases: concordia.age
> 
> ### ** Examples
> 
> data(examples)
> fit <- concordia.age(examples$UPb)
> print(paste('age = ',fit$age,'+/-',fit$age.err,'Ma, MSWD = ',fit$mswd))
[1] "age =  249.47208452359 +/- 0.141708201420294 Ma, MSWD =  260.208819049681"
[2] "age =  249.47208452359 +/- 0.141708201420294 Ma, MSWD =  10.9242746271603"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia.age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia.plot")
> ### * concordia.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia.plot
> ### Title: Concordia diagram
> ### Aliases: concordia.plot
> 
> ### ** Examples
> 
> data(examples)
> concordia.plot(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("discordia.age")
> ### * discordia.age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: discordia.age
> ### Title: Linear regression on a U-Pb concordia diagram
> ### Aliases: discordia.age
> 
> ### ** Examples
> 
> data(examples)
> fit <- discordia.age(examples$UPb)
> print(paste('lower intercept = ',fit$x[1],'+/-',sqrt(fit$cov[1,1]),'Ma'))
[1] "lower intercept =  -5.67562535169994 +/- 31.9787394119988 Ma"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("discordia.age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("examples")
> ### * examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: examples
> ### Title: Example datasets for testing 'IsoplotR'
> ### Aliases: examples
> 
> ### ** Examples
> 
> data(examples)
> concordia.plot(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde")
> ### * kde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde
> ### Title: Create a kernel density estimate
> ### Aliases: kde
> 
> ### ** Examples
> 
> data(examples)
> dens <- kde(examples$DZ[['N1']],0,3000,kernel="epanechnikov")
> plot(dens)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde.plot")
> ### * kde.plot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde.plot
> ### Title: Plot (a) kernel density estimate(s)
> ### Aliases: kde.plot
> 
> ### ** Examples
> 
> data(examples)
> kde.plot(examples$DZ[['N2']])
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde.plot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kdes")
> ### * kdes
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kdes
> ### Title: Create a list of KDEs
> ### Aliases: kdes
> 
> ### ** Examples
> 
> data(examples)
> KDES <- kdes(examples$DZ,from=0,to=3000)
> plot(KDES)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kdes", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("lambda")
> ### * lambda
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: lambda
> ### Title: Decay constants
> ### Aliases: lambda
> 
> ### ** Examples
> 
> print(lambda('U238'))
[1] 0.000155125 0.000000083
> # use the decay constant of Kovarik and Adams (1932)
> lambda('U238',0.0001537,0.0000068)
> print(lambda('U238'))
[1] 0.0001537 0.0000068
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("lambda", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.KDE")
> ### * plot.KDE
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.KDE
> ### Title: Plot a kernel density estimate
> ### Aliases: plot.KDE
> 
> ### ** Examples
> 
> data(examples)
> dens <- kde(examples$DZ[['N1']],from=0,to=3000)
> plot(dens)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.KDE", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.KDEs")
> ### * plot.KDEs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.KDEs
> ### Title: Plot a list of kernel density estimates
> ### Aliases: plot.KDEs
> 
> ### ** Examples
> 
> data(examples)
> KDES <- kdes(examples$DZ)
> plot(KDES)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.KDEs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.data")
> ### * read.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.data
> ### Title: Read geochronology data
> ### Aliases: read.data
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> fname <- system.file("UPb.csv",package="IsoplotR")
> UPb <- read.data(fname,'U-Pb')
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.matrix")
> ### * read.matrix
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.matrix
> ### Title: Read geochronology data
> ### Aliases: read.matrix
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> fname <- system.file("UPb.csv",package="IsoplotR")
> dat <- read.csv(fname,header=TRUE)
> UPb <- read.matrix(dat,method='U-Pb',format=1)
> concordia.plot(UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.matrix", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("settings")
> ### * settings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: settings
> ### Title: Load settings to and from json
> ### Aliases: settings
> 
> ### ** Examples
> 
> json <- system.file("defaults.json",package="IsoplotR")
> settings(json)
Warning in file(con, "r") :
  file("") only supports open = "w+" and open = "w+b": using the former
> print(settings())
[1] "{\"lambda\":null,\"I.R\":null}"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("settings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("yorkfit")
> ### * yorkfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: yorkfit
> ### Title: Linear regression of X,Y-variables with correlated errors
> ### Aliases: yorkfit
> 
> ### ** Examples
> 
>    X <- c(1.550,12.395,20.445,20.435,20.610,24.900,
+           28.530,50.540,51.595,86.51,106.40,157.35)
>    Y <- c(.7268,.7849,.8200,.8156,.8160,.8322,
+           .8642,.9584,.9617,1.135,1.230,1.490)
>    n <- length(X)
>    sX <- X*0.01
>    sY <- Y*0.005
>    rXY <- rep(0.8,n)
>    fit <- yorkfit(X,Y,sX,sY,rXY)
>    covmat <- matrix(0,2,2)
>    plot(range(X),fit$a+fit$b*range(X),type='l',ylim=range(Y))
>    for (i in 1:n){
+        covmat[1,1] <- sX[i]^2
+        covmat[2,2] <- sY[i]^2
+        covmat[1,2] <- rXY[i]*sX[i]*sY[i]
+        covmat[2,1] <- covmat[1,2]
+        ell <- ellipse(X[i],Y[i],covmat,alpha=0.05)
+        polygon(ell)
+    }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("yorkfit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.892 0.48 6.863 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
