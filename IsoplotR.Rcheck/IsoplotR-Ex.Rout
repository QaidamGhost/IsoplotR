
R Under development (unstable) (2016-08-12 r71089) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("age")
> ### * age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: age
> ### Title: Calculate isotopic ages
> ### Aliases: age age.ArAr age.RbSr age.ReOs age.SmNd age.UPb age.UThHe
> ###   age.default age.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> print(age(examples$UPb))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.555230 251.9494
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4017 7.404241 251.5958
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.021362 251.5605
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.427487 251.3588
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.243669 251.1650
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.625510 251.2366
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1162 5.241270 250.8009
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.622336 250.8320
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7755 3.243182 251.2929
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.554475 229.0388
      s[t.conc]
 [1,] 0.2460580
 [2,] 0.2477569
 [3,] 0.6107034
 [4,] 0.3093508
 [5,] 0.2466430
 [6,] 0.6074621
 [7,] 0.2479353
 [8,] 0.3694499
 [9,] 0.2466243
[10,] 0.3097469
> print(age(examples$UPb,type=1))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.555230 251.9494
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4017 7.404241 251.5958
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.021362 251.5605
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.427487 251.3588
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.243669 251.1650
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.625510 251.2366
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1162 5.241270 250.8009
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.622336 250.8320
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7755 3.243182 251.2929
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.554475 229.0388
      s[t.conc]
 [1,] 0.2460580
 [2,] 0.2477569
 [3,] 0.6107034
 [4,] 0.3093508
 [5,] 0.2466430
 [6,] 0.6074621
 [7,] 0.2479353
 [8,] 0.3694499
 [9,] 0.2466243
[10,] 0.3097469
> print(age(examples$UPb,type=2))
$x
 Pb207U235  Pb206U238 
0.27913410 0.03941493 

$cov
             Pb207U235    Pb206U238
Pb207U235 2.233446e-08 1.609406e-09
Pb206U238 1.609406e-09 2.270769e-10

$age
      t.conc    s[t.conc] 
249.29386655   0.09299361 

$mswd
$mswd$equivalence
         [,1]
[1,] 260.2088

$mswd$concordance
         [,1]
[1,] 84.02125


$p.value
$p.value$equivalence
     [,1]
[1,]    0

$p.value$concordance
     [,1]
[1,]    0


attr(,"class")
[1] "wetherill"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("agespectrum")
> ### * agespectrum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: agespectrum
> ### Title: Plot a (40Ar/39Ar) release spectrum
> ### Aliases: agespectrum agespectrum.ArAr agespectrum.default
> 
> ### ** Examples
> 
> data(examples)
> agespectrum(examples$ArAr,ylim=c(0,80))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("agespectrum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cad")
> ### * cad
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cad
> ### Title: Plot continuous data as cumulative age distributions
> ### Aliases: cad cad.ArAr cad.RbSr cad.ReOs cad.SmNd cad.UPb cad.UThHe
> ###   cad.default cad.detritals cad.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> cad(examples$DZ,verticals=FALSE,pch=20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cad", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("central")
> ### * central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: central
> ### Title: Calculate U-Th-He (and fission track) central ages and
> ###   compositions
> ### Aliases: central central.UThHe central.default central.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> print(central(examples$UThHe)$age)
         U            
6.40800509 0.05909253 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia")
> ### * concordia
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia
> ### Title: Concordia diagram
> ### Aliases: concordia
> 
> ### ** Examples
> 
> data(examples)
> concordia(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("examples")
> ### * examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: examples
> ### Title: Example datasets for testing 'IsoplotR'
> ### Aliases: examples
> 
> ### ** Examples
> 
> data(example)
Warning in data(example) : data set ‘example’ not found
> concordia(examples$UPb)
> dev.new()
> kde(examples$DZ)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("helioplot")
> ### * helioplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: helioplot
> ### Title: Visualise U-Th-He data on a logratio plot or ternary diagram
> ### Aliases: helioplot
> 
> ### ** Examples
> 
> data(examples)
> helioplot(examples$UThHe)
> dev.new()
dev.new(): using pdf(file="Rplots1.pdf")
> helioplot(examples$UThHe,logratio=FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("helioplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isochron")
> ### * isochron
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isochron
> ### Title: Calculate and plot isochrons
> ### Aliases: isochron isochron.ArAr isochron.RbSr isochron.ReOs
> ###   isochron.SmNd isochron.default
> 
> ### ** Examples
> 
> data(examples)
> isochron(examples$ArAr)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isochron", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde")
> ### * kde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde
> ### Title: Create (a) kernel density estimate(s)
> ### Aliases: kde kde.ArAr kde.RbSr kde.ReOs kde.SmNd kde.UPb kde.UThHe
> ###   kde.default kde.detritals kde.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> kde(examples$DZ[['N1']],kernel="epanechnikov")
> kde(examples$DZ,from=0,to=3000)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mds")
> ### * mds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mds
> ### Title: Multidimensional Scaling
> ### Aliases: mds mds.default mds.detritals
> 
> ### ** Examples
> 
> data(examples)
> # Parameters 'xaxt' and 'yaxt' control if the axis is plotted at all.
> mds(examples$DZ,nnlines=TRUE,cex=5,xaxt='n',yaxt='n')
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
NULL
> dev.new()
dev.new(): using pdf(file="Rplots2.pdf")
> mds(examples$DZ,shepard=TRUE)
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("peakfit")
> ### * peakfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: peakfit
> ### Title: Finite mixture modelling of geochronological datasets
> ### Aliases: peakfit peakfit.ArAr peakfit.RbSr peakfit.ReOs peakfit.SmNd
> ###   peakfit.UPb peakfit.UThHe peakfit.default peakfit.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> peakfit(examples$FT1,k=2)
$L
[1] -71.94616

$peaks
[1] 103.4585 103.4604

$props
[1] 0.4118593 0.5881407

$peaks.err
[1] 13.65063 11.53875

$props.err
[1] 4143.565 4143.565

$legend
[1] "Peak 1: 103±14 (40±410000%)" "Peak 2: 103±12 (60±410000%)"

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("peakfit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("radialplot")
> ### * radialplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: radialplot
> ### Title: Visualise heteroscedastic data on a radial plot
> ### Aliases: radialplot radialplot.ArAr radialplot.RbSr radialplot.ReOs
> ###   radialplot.SmNd radialplot.UPb radialplot.UThHe radialplot.default
> ###   radialplot.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> radialplot(examples$FT1)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("radialplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("read.data")
> ### * read.data
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: read.data
> ### Title: Read geochronology data
> ### Aliases: read.data read.data.default read.data.matrix
> 
> ### ** Examples
> 
> # load one of the built-in .csv files:
> data(examples)
> concordia(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("read.data", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("set.zeta")
> ### * set.zeta
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: set.zeta
> ### Title: Calculate the zeta calibration coefficient for fission track
> ###   dating
> ### Aliases: set.zeta
> 
> ### ** Examples
> 
> data(examples)
> print(examples$FT1$zeta)
[1] 350  10
> FT <- set.zeta(examples$FT1,tst=c(250,5))
> print(FT$zeta)
     age err
[1,] 855  36
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("set.zeta", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("settings")
> ### * settings
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: settings
> ### Title: Load settings to and from json
> ### Aliases: settings
> 
> ### ** Examples
> 
> # load and show the default constants that come with IsoplotR
> json <- system.file("constants.json",package="IsoplotR")
> settings(fname=json)
> print(settings())
[1] "{\"lambda\":{\"fission\":[8.5e-11,1e-12],\"U238\":[0.000155125,8.3e-08],\"U235\":[0.00098485,6.7e-07],\"Th232\":[4.95e-05,2.5e-06],\"Rb87\":[1.3972e-05,4.5e-07],\"Re187\":[1.6689e-05,3.8e-08],\"Sm147\":[6.54e-06,4.9e-08],\"K40\":[0.00055305,1.32e-06]},\"etchfact\":{\"apatite\":0.93,\"zircon\":1},\"imass\":{\"U\":[238.02891,3e-05],\"Rb\":[85.46776,0.00026],\"Rb85\":[84.9117924,2.7e-06],\"Rb87\":[86.9091828,2.8e-06],\"Sr\":[87.62,0.01],\"Sr84\":[83.913426,4e-06],\"Sr86\":[85.9092647,2.5e-06],\"Sr87\":[86.9088816,2.5e-06],\"Sr88\":[87.9056167,2.5e-06],\"Re\":[186.20679,0.00031],\"Re185\":[184.952955,3e-06],\"Re187\":[186.9557505,3e-06],\"Os\":[190.23,0.003],\"Os184\":[183.952491,3e-06],\"Os186\":[185.953838,3e-06],\"Os187\":[186.9557476,3e-06],\"Os188\":[187.9558357,3e-06],\"Os189\":[188.958145,3e-06],\"Os190\":[189.958445,3e-06],\"Os192\":[191.961479,4e-06],\"Sm\":[150.36,0.03],\"Nd\":[144.2415,0.0013]},\"iratio\":{\"Ar40Ar36\":[298.56,0.31],\"Ar38Ar36\":[0.1885,3e-04],\"Rb85Rb87\":[2.59265,0.00085],\"Sr84Sr86\":[0.056549,7.15e-05],\"Sr87Sr86\":[0.710339,0.0001305],\"Sr88Sr86\":[8.37861,0.001624],\"Re185Re187\":[0.59738,0.000195],\"Os184Os192\":[0.000485,0.00011],\"Os186Os192\":[0.03889,0.00011],\"Os187Os192\":[0.04817,3e-05],\"Os188Os192\":[0.32474,5e-05],\"Os189Os192\":[0.39593,4e-05],\"Os190Os192\":[0.64388,0.00045],\"U238U235\":[137.818,0.0225],\"Sm144Sm152\":[0.115117,0.000189],\"Sm147Sm152\":[0.561134,0.000622],\"Sm148Sm152\":[0.420634,0.000392],\"Sm149Sm152\":[0.516973,0.000393],\"Sm150Sm152\":[0.275438,0.000459],\"Sm154Sm152\":[0.850468,0.000484],\"Nd142Nd144\":[1.14101,7e-04],\"Nd143Nd144\":[0.51154,4e-04],\"Nd145Nd144\":[0.34848,0.00015],\"Nd146Nd144\":[0.72228,0.00051],\"Nd148Nd144\":[0.24186,3e-04],\"Nd150Nd144\":[0.23691,0.00042]},\"mindens\":{\"apatite\":3.22,\"zircon\":4.7},\"tracklength\":{\"apatite\":16.2,\"zircon\":10.6}}"
> 
> # use the decay constant of Kovarik and Adams (1932)
> settings('lambda','U238',0.0001537,0.0000068)
> print(settings('lambda','U238'))
[1] 0.0001537 0.0000068
> 
> # returns the 238U/235U ratio of Hiess et al. (2012):
> print(settings('iratio','U238U235'))
[1] 137.8180   0.0225
> # use the 238U/235U ratio of Steiger and Jaeger (1977):
> settings('iratio','U238U235',138.88,0)
> print(settings('iratio','U238U235'))
[1] 138.88   0.00
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("settings", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weightedmean")
> ### * weightedmean
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weightedmean
> ### Title: Calculate the weighted mean age
> ### Aliases: weightedmean weightedmean.ArAr weightedmean.RbSr
> ###   weightedmean.ReOs weightedmean.SmNd weightedmean.UPb
> ###   weightedmean.UThHe weightedmean.default weightedmean.fissiontracks
> 
> ### ** Examples
> 
> ages <- c(251.9,251.59,251.47,251.35,251.1,251.04,250.79,250.73,251.22,228.43)
> errs <- c(0.28,0.28,0.63,0.34,0.28,0.63,0.28,0.4,0.28,0.33)
> weightedmean(cbind(ages,errs))
> data(examples)
> weightedmean(examples$ArAr)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weightedmean", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("yorkfit")
> ### * yorkfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: yorkfit
> ### Title: Linear regression of X,Y-variables with correlated errors
> ### Aliases: yorkfit
> 
> ### ** Examples
> 
>    X <- c(1.550,12.395,20.445,20.435,20.610,24.900,
+           28.530,50.540,51.595,86.51,106.40,157.35)
>    Y <- c(.7268,.7849,.8200,.8156,.8160,.8322,
+           .8642,.9584,.9617,1.135,1.230,1.490)
>    n <- length(X)
>    sX <- X*0.01
>    sY <- Y*0.005
>    rXY <- rep(0.8,n)
>    dat <- cbind(X,sX,Y,sY,rXY)
>    fit <- yorkfit(dat)
>    covmat <- matrix(0,2,2)
>    plot(range(X),fit$a[1]+fit$b[1]*range(X),type='l',ylim=range(Y))
>    for (i in 1:n){
+        covmat[1,1] <- sX[i]^2
+        covmat[2,2] <- sY[i]^2
+        covmat[1,2] <- rXY[i]*sX[i]*sY[i]
+        covmat[2,1] <- covmat[1,2]
+        ell <- ellipse(X[i],Y[i],covmat,alpha=0.05)
+        polygon(ell)
+    }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("yorkfit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  6.832 0.144 6.874 0 0 
> grDevices::dev.off()
pdf 
  2 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
