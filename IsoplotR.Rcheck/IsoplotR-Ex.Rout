
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("age")
> ### * age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: age
> ### Title: Calculate isotopic ages
> ### Aliases: age age.default age.UPb age.PbPb age.ArAr age.UThHe
> ###   age.fissiontracks age.ThU age.ReOs age.SmNd age.RbSr age.LuHf
> 
> ### ** Examples
> 
> data(examples)
> print(age(examples$UPb))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.838277 251.9814
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4016 7.506655 251.6013
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.206896 251.5659
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.596692 251.3790
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.470841 251.2421
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.830204 251.2322
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1163 5.384759 250.8575
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.827096 250.8894
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7756 3.470364 251.3738
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.837485 229.2815
      s[t.conc]
 [1,] 0.2693551
 [2,] 0.2799966
 [3,] 0.6199130
 [4,] 0.3329430
 [5,] 0.2724836
 [6,] 0.6164084
 [7,] 0.2791451
 [8,] 0.3865272
 [9,] 0.2724797
[10,] 0.3243414
> print(age(examples$UPb,type=1))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.838277 251.9814
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4016 7.506655 251.6013
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.206896 251.5659
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.596692 251.3790
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.470841 251.2421
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.830204 251.2322
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1163 5.384759 250.8575
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.827096 250.8894
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7756 3.470364 251.3738
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.837485 229.2815
      s[t.conc]
 [1,] 0.2693551
 [2,] 0.2799966
 [3,] 0.6199130
 [4,] 0.3329430
 [5,] 0.2724836
 [6,] 0.6164084
 [7,] 0.2791451
 [8,] 0.3865272
 [9,] 0.2724797
[10,] 0.3243414
> print(age(examples$UPb,type=2))
$mswd
equivalence concordance    combined 
  274.66486    10.92428   260.78378 

$p.value
 equivalence  concordance     combined 
0.0000000000 0.0009491215 0.0000000000 

$df
equivalence concordance    combined 
         18           1          19 

$age
          t        s[t]       ci[t]     disp[t] 
249.4719549   0.1417081   0.2965984  77.3480589 

$x
 Pb207U235  Pb206U238 
0.27913410 0.03941493 

$cov
             Pb207U235    Pb206U238
Pb207U235 2.233446e-08 1.609406e-09
Pb206U238 1.609406e-09 2.270769e-10

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("agespectrum")
> ### * agespectrum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: agespectrum
> ### Title: Plot a (40Ar/39Ar) release spectrum
> ### Aliases: agespectrum agespectrum.default agespectrum.ArAr
> 
> ### ** Examples
> 
> data(examples)
> agespectrum(examples$ArAr,ylim=c(0,80))
$mean
        x      s[x]     ci[x] 
61.749746  0.279733  1.203594 

$disp
        s        ci 
0.1903444 0.3730681 

$df
[1] 2

$mswd
[1] 6.111891

$p.value
[1] 0.0003750108

$tfact
[1] 4.302653

$plotpar
$plotpar$mean
$plotpar$mean$x
[1] 0 5

$plotpar$mean$y
       x        x 
61.74975 61.74975 


$plotpar$rect
$plotpar$rect$x
[1] 0 5 5 0

$plotpar$rect$y
       x        x        x        x 
62.21768 62.21768 61.28181 61.28181 


$plotpar$dash1
$plotpar$dash1$x
[1] 0 5

$plotpar$dash1$y
       x        x 
62.12281 62.12281 


$plotpar$dash2
$plotpar$dash2$x
[1] 0 5

$plotpar$dash2$y
       x        x 
61.37668 61.37668 



$i
[1] 6 7 8 9

$fract
[1] 0.5572799

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("agespectrum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cad")
> ### * cad
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cad
> ### Title: Plot continuous data as cumulative age distributions
> ### Aliases: cad cad.default cad.detritals cad.UPb cad.PbPb cad.ArAr
> ###   cad.ThU cad.ReOs cad.SmNd cad.RbSr cad.LuHf cad.UThHe
> ###   cad.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> cad(examples$DZ,verticals=FALSE,pch=20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cad", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("central")
> ### * central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: central
> ### Title: Calculate U-Th-He and fission track central ages and
> ###   compositions
> ### Aliases: central central.default central.UThHe central.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> print(central(examples$UThHe)$age)
         t       s[t]      ci[t]    disp[t] 
6.42248810 0.07890887 0.15820276 0.29769549 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia")
> ### * concordia
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia
> ### Title: Concordia diagram
> ### Aliases: concordia
> 
> ### ** Examples
> 
> data(examples) 
> concordia(examples$UPb)
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("evolution")
> ### * evolution
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: evolution
> ### Title: Th-U evolution diagram
> ### Aliases: evolution
> 
> ### ** Examples
> 
> data(examples)
> evolution(examples$ThU)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("evolution", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("examples")
> ### * examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: examples
> ### Title: Example datasets for testing 'IsoplotR'
> ### Aliases: examples
> 
> ### ** Examples
> 
> data(examples)
> 
> concordia(examples$UPb)
NULL
> 
> agespectrum(examples$ArAr)
$mean
        x      s[x]     ci[x] 
61.749746  0.279733  1.203594 

$disp
        s        ci 
0.1903444 0.3730681 

$df
[1] 2

$mswd
[1] 6.111891

$p.value
[1] 0.0003750108

$tfact
[1] 4.302653

$plotpar
$plotpar$mean
$plotpar$mean$x
[1] 0 5

$plotpar$mean$y
       x        x 
61.74975 61.74975 


$plotpar$rect
$plotpar$rect$x
[1] 0 5 5 0

$plotpar$rect$y
       x        x        x        x 
62.21768 62.21768 61.28181 61.28181 


$plotpar$dash1
$plotpar$dash1$x
[1] 0 5

$plotpar$dash1$y
       x        x 
62.12281 62.12281 


$plotpar$dash2
$plotpar$dash2$x
[1] 0 5

$plotpar$dash2$y
       x        x 
61.37668 61.37668 



$i
[1] 6 7 8 9

$fract
[1] 0.5572799

> 
> isochron(examples$ReOs)
$df
[1] 6

$mswd
[1] 0.3618688

$p.value
[1] 0.9032978

$a
          a        s[a] 
0.527972178 0.008733409 

$b
           b         s[b] 
0.0025591845 0.0000156155 

$cov.ab
[1] -1.267093e-07

$model
[1] 1

$age
          t        s[t]       ci[t]     disp[t] 
153.1496996   0.9963071   2.4378757   1.6171825 

$y0
          y        s[y]       ci[y]     disp[y] 
0.527972178 0.008733409 0.021369882 0.012855166 

$tfact
[1] 2.446912

attr(,"class")
[1] "isochron"
> 
> radialplot(examples$FT1)
> 
> helioplot(examples$UThHe)
NULL
> 
> evolution(examples$ThU)
> 
> kde(examples$Namib)
> 
> radialplot(examples$MountTom)
> 
> agespectrum(examples$spectrum)
$mean
         x       s[x]      ci[x] 
4.78521432 0.00941314 0.02097378 

$disp
           s           ci 
0.0004372914 0.0008570755 

$df
[1] 10

$mswd
[1] 0.6216236

$p.value
[1] 0.8120578

$tfact
[1] 2.228139

$plotpar
$plotpar$mean
$plotpar$mean$x
[1]  0 13

$plotpar$mean$y
       x        x 
4.785214 4.785214 


$plotpar$rect
$plotpar$rect$x
[1]  0 13 13  0

$plotpar$rect$y
       x        x        x        x 
4.806188 4.806188 4.764241 4.764241 


$plotpar$dash1
$plotpar$dash1$x
[1]  0 13

$plotpar$dash1$y
       x        x 
4.786071 4.786071 


$plotpar$dash2
$plotpar$dash2$x
[1]  0 13

$plotpar$dash2$y
       x        x 
4.784357 4.784357 



$i
 [1]  1  2  3  4  5  6  7  8  9 10 11 12

$fract
[1] 0.912

> 
> weightedmean(examples$average)
$mean
          x        s[x]       ci[x] 
250.1525727   0.3525444   0.7260788 

$disp
        s        ci 
0.4250016 0.8329879 

$df
[1] 25

$mswd
[1] 1.045297

$p.value
[1] 0.4000607

$valid
 [1]  TRUE  TRUE  TRUE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[13]  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[25]  TRUE  TRUE  TRUE  TRUE

$tfact
[1] 2.059539

$plotpar
$plotpar$mean
$plotpar$mean$x
[1]  0 29

$plotpar$mean$y
       x        x 
250.1526 250.1526 


$plotpar$rect
$plotpar$rect$x
[1]  0 29 29  0

$plotpar$rect$y
       x        x        x        x 
250.8787 250.8787 249.4265 249.4265 


$plotpar$dash1
$plotpar$dash1$x
[1]  0 29

$plotpar$dash1$y
       x        x 
250.9856 250.9856 


$plotpar$dash2
$plotpar$dash2$x
[1]  0 29

$plotpar$dash2$y
       x        x 
249.3196 249.3196 



> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("helioplot")
> ### * helioplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: helioplot
> ### Title: Visualise U-Th-He data on a logratio plot or ternary diagram
> ### Aliases: helioplot
> 
> ### ** Examples
> 
> data(examples)
> helioplot(examples$UThHe)
NULL
> dev.new()
> helioplot(examples$UThHe,logratio=FALSE)
NULL
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("helioplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isochron")
> ### * isochron
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isochron
> ### Title: Calculate and plot isochrons
> ### Aliases: isochron isochron.default isochron.ArAr isochron.PbPb
> ###   isochron.RbSr isochron.ReOs isochron.SmNd isochron.LuHf isochron.ThU
> ###   isochron.UThHe
> 
> ### ** Examples
> 
> data(examples)
> isochron(examples$ArAr)
$df
[1] 9

$mswd
[1] 5.695801

$p.value
[1] 6.230807e-08

$a
           a         s[a] 
3.309029e-03 7.819574e-06 

$b
            b          s[b] 
-1.507141e-02  4.949318e-05 

$cov.ab
[1] -3.804838e-10

$model
[1] 1

$age
         t       s[t]      ci[t]    disp[t] 
61.6010915  0.3233058  0.7313685  1.4062794 

$y0
          y        s[y]       ci[y]     disp[y] 
302.2034502   0.7141377   1.6154916   3.8555123 

$tfact
[1] 2.262157

attr(,"class")
[1] "isochron"
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isochron", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde")
> ### * kde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde
> ### Title: Create (a) kernel density estimate(s)
> ### Aliases: kde kde.default kde.UPb kde.detritals kde.PbPb kde.ArAr
> ###   kde.ThU kde.ReOs kde.SmNd kde.RbSr kde.LuHf kde.UThHe
> ###   kde.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> kde(examples$DZ[['N1']],kernel="epanechnikov")
> kde(examples$DZ,from=0,to=3000)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ludwig")
> ### * ludwig
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ludwig
> ### Title: Linear regression of X,Y,Z-variables with correlated errors,
> ###   taking into account decay constant uncertainties.
> ### Aliases: ludwig ludwig.default ludwig.UPb
> 
> ### ** Examples
> 
> f <- system.file("UPb4.csv",package="IsoplotR")
> d <- read.data(f,method="U-Pb",format=4)
> fit <- ludwig(d)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ludwig", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mds")
> ### * mds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mds
> ### Title: Multidimensional Scaling
> ### Aliases: mds mds.default mds.detritals
> 
> ### ** Examples
> 
> data(examples)
> mds(examples$DZ,nnlines=TRUE,pch=21,cex=5)
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
$points
           [,1]        [,2]
N1  -0.28573404 -0.13037179
N2  -0.17143499  0.03128168
N3   0.17950369 -0.01635334
N4   0.30680286 -0.01803281
N5   0.21864596 -0.09725819
N6   0.20643114 -0.05059452
N7   0.16961330  0.09432651
N8  -0.01972579 -0.02512879
N9   0.15307422  0.02960760
N10  0.14735247 -0.04644282
N11 -0.13381086 -0.04474698
N12 -0.13439235  0.02935787
N13  0.01491494  0.15440681
N14 -0.14420492  0.16950713
T8  -0.31679396  0.01529288
T13 -0.19024165 -0.09485124

$stress
[1] 7.640383

$classical
[1] FALSE

$diss
            N1         N2         N3         N4         N5         N6
N2  0.16788908                                                       
N3  0.35104956 0.26133929                                            
N4  0.42971624 0.34586886 0.15028777                                 
N5  0.41014381 0.33042373 0.11379464 0.16346667                      
N6  0.38848366 0.29296804 0.06024590 0.10757143 0.10503099           
N7  0.35541637 0.25439878 0.12022654 0.17479586 0.18535649 0.15194175
N8  0.22482696 0.14449011 0.22174825 0.23461538 0.21480000 0.18588235
N9  0.34064331 0.26033003 0.10835165 0.15302034 0.12117371 0.12774510
N10 0.33059313 0.25666164 0.08083402 0.16283945 0.08716855 0.06882353
N11 0.17571970 0.12996997 0.26414894 0.33538462 0.29259843 0.25890625
N12 0.19087551 0.10291667 0.24689655 0.32034014 0.30117925 0.27872727
N13 0.34179256 0.24445851 0.20476395 0.28927039 0.27256000 0.22904000
N14 0.27616273 0.17032349 0.29167384 0.37454590 0.34536070 0.33131806
T8  0.15605406 0.21435897 0.37292683 0.46227642 0.42119275 0.41642276
T13 0.14572033 0.19857180 0.29431188 0.36528302 0.34657168 0.31876249
            N7         N8         N9        N10        N11        N12
N2                                                                   
N3                                                                   
N4                                                                   
N5                                                                   
N6                                                                   
N7                                                                   
N8  0.23393939                                                       
N9  0.11500000 0.16149254                                            
N10 0.11843137 0.14974991 0.13323355                                 
N11 0.28002172 0.13174447 0.22214286 0.24103250                      
N12 0.24059524 0.12148515 0.24240506 0.23678332 0.08498039           
N13 0.16583333 0.17767494 0.19088000 0.19931835 0.23176072 0.16453608
N14 0.27423959 0.17460735 0.28602065 0.26764868 0.19891269 0.13111440
T8  0.36853107 0.25398374 0.36928571 0.35068111 0.18666667 0.15009542
T13 0.27888042 0.16581793 0.28028857 0.25932297 0.13694444 0.14150818
           N13        N14         T8
N2                                  
N3                                  
N4                                  
N5                                  
N6                                  
N7                                  
N8                                  
N9                                  
N10                                 
N11                                 
N12                                 
N13                                 
N14 0.14946085                      
T8  0.23560976 0.21931539           
T13 0.22976315 0.23424494 0.13377358

attr(,"class")
[1] "MDS"
> dev.new()
dev.new(): using pdf(file="Rplots1.pdf")
> mds(examples$DZ,shepard=TRUE)
initial  value 10.433734 
iter   5 value 8.523890
iter  10 value 8.154735
iter  15 value 8.048099
iter  20 value 7.871811
iter  20 value 7.868858
iter  25 value 7.642453
iter  25 value 7.640889
iter  25 value 7.640383
final  value 7.640383 
converged
$points
           [,1]        [,2]
N1  -0.28573404 -0.13037179
N2  -0.17143499  0.03128168
N3   0.17950369 -0.01635334
N4   0.30680286 -0.01803281
N5   0.21864596 -0.09725819
N6   0.20643114 -0.05059452
N7   0.16961330  0.09432651
N8  -0.01972579 -0.02512879
N9   0.15307422  0.02960760
N10  0.14735247 -0.04644282
N11 -0.13381086 -0.04474698
N12 -0.13439235  0.02935787
N13  0.01491494  0.15440681
N14 -0.14420492  0.16950713
T8  -0.31679396  0.01529288
T13 -0.19024165 -0.09485124

$stress
[1] 7.640383

$classical
[1] FALSE

$diss
            N1         N2         N3         N4         N5         N6
N2  0.16788908                                                       
N3  0.35104956 0.26133929                                            
N4  0.42971624 0.34586886 0.15028777                                 
N5  0.41014381 0.33042373 0.11379464 0.16346667                      
N6  0.38848366 0.29296804 0.06024590 0.10757143 0.10503099           
N7  0.35541637 0.25439878 0.12022654 0.17479586 0.18535649 0.15194175
N8  0.22482696 0.14449011 0.22174825 0.23461538 0.21480000 0.18588235
N9  0.34064331 0.26033003 0.10835165 0.15302034 0.12117371 0.12774510
N10 0.33059313 0.25666164 0.08083402 0.16283945 0.08716855 0.06882353
N11 0.17571970 0.12996997 0.26414894 0.33538462 0.29259843 0.25890625
N12 0.19087551 0.10291667 0.24689655 0.32034014 0.30117925 0.27872727
N13 0.34179256 0.24445851 0.20476395 0.28927039 0.27256000 0.22904000
N14 0.27616273 0.17032349 0.29167384 0.37454590 0.34536070 0.33131806
T8  0.15605406 0.21435897 0.37292683 0.46227642 0.42119275 0.41642276
T13 0.14572033 0.19857180 0.29431188 0.36528302 0.34657168 0.31876249
            N7         N8         N9        N10        N11        N12
N2                                                                   
N3                                                                   
N4                                                                   
N5                                                                   
N6                                                                   
N7                                                                   
N8  0.23393939                                                       
N9  0.11500000 0.16149254                                            
N10 0.11843137 0.14974991 0.13323355                                 
N11 0.28002172 0.13174447 0.22214286 0.24103250                      
N12 0.24059524 0.12148515 0.24240506 0.23678332 0.08498039           
N13 0.16583333 0.17767494 0.19088000 0.19931835 0.23176072 0.16453608
N14 0.27423959 0.17460735 0.28602065 0.26764868 0.19891269 0.13111440
T8  0.36853107 0.25398374 0.36928571 0.35068111 0.18666667 0.15009542
T13 0.27888042 0.16581793 0.28028857 0.25932297 0.13694444 0.14150818
           N13        N14         T8
N2                                  
N3                                  
N4                                  
N5                                  
N6                                  
N7                                  
N8                                  
N9                                  
N10                                 
N11                                 
N12                                 
N13                                 
N14 0.14946085                      
T8  0.23560976 0.21931539           
T13 0.22976315 0.23424494 0.13377358

attr(,"class")
[1] "MDS"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mds", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("peakfit")
> ### * peakfit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: peakfit
> ### Title: Finite mixture modelling of geochronological datasets
> ### Aliases: peakfit peakfit.default peakfit.fissiontracks peakfit.UPb
> ###   peakfit.PbPb peakfit.ArAr peakfit.ReOs peakfit.SmNd peakfit.RbSr
> ###   peakfit.LuHf peakfit.ThU peakfit.UThHe
> 
> ### ** Examples
> 
> data(examples)
> peakfit(examples$FT1,k=2)
Error in fit$props[2:3, i] : subscript out of bounds
Calls: peakfit -> peakfit.fissiontracks -> peaks2legend -> roundit
Execution halted
