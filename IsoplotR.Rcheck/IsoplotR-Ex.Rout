
R Under development (unstable) (2016-08-17 r71112) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("age")
> ### * age
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: age
> ### Title: Calculate isotopic ages
> ### Aliases: age age.default age.UPb age.PbPb age.ArAr age.UThHe
> ###   age.fissiontracks age.ReOs age.SmNd age.RbSr age.LuHf
> 
> ### ** Examples
> 
> data(examples)
> print(age(examples$UPb))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.555230 251.9494
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4017 7.404241 251.5958
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.021362 251.5605
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.427487 251.3588
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.243669 251.1650
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.625510 251.2366
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1163 5.241270 250.8009
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.622336 250.8320
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7756 3.243182 251.2929
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.554475 229.0388
      s[t.conc]
 [1,] 0.2460580
 [2,] 0.2477569
 [3,] 0.6107034
 [4,] 0.3093508
 [5,] 0.2466430
 [6,] 0.6074621
 [7,] 0.2479353
 [8,] 0.3694499
 [9,] 0.2466243
[10,] 0.3097469
> print(age(examples$UPb,type=1))
          t.75   s[t.75]     t.68   s[t.68]     t.76  s[t.76]   t.conc
 [1,] 252.1636 0.3327781 251.9031 0.2822366 253.7468 2.555230 251.9494
 [2,] 251.7675 0.7488598 251.5931 0.2821679 252.4017 7.404241 251.5958
 [3,] 251.7675 0.6796299 251.4692 0.6344108 253.7468 4.021362 251.5605
 [4,] 251.6090 0.5128490 251.3452 0.3379093 252.8502 4.427487 251.3588
 [5,] 251.7675 0.3813597 251.0972 0.2820582 257.3284 3.243669 251.1650
 [6,] 251.5298 0.6567536 251.0352 0.6344024 255.0908 3.625510 251.2366
 [7,] 251.6883 0.5578766 250.7871 0.2819897 259.1163 5.241270 250.8009
 [8,] 251.4505 0.4831095 250.7251 0.3954781 257.3284 3.622336 250.8320
 [9,] 251.9260 0.3813606 251.2212 0.2820856 257.7756 3.243182 251.2929
[10,] 230.9532 0.3669518 228.4268 0.3342463 255.5386 2.554475 229.0388
      s[t.conc]
 [1,] 0.2460580
 [2,] 0.2477569
 [3,] 0.6107034
 [4,] 0.3093508
 [5,] 0.2466430
 [6,] 0.6074621
 [7,] 0.2479353
 [8,] 0.3694499
 [9,] 0.2466243
[10,] 0.3097469
> print(age(examples$UPb,type=2))
$x
 Pb207U235  Pb206U238 
0.27913410 0.03941493 

$cov
             Pb207U235    Pb206U238
Pb207U235 2.233446e-08 1.609406e-09
Pb206U238 1.609406e-09 2.270769e-10

$age
      t.conc    s[t.conc] 
249.29386655   0.09299361 

$mswd
$mswd$equivalence
         [,1]
[1,] 260.2088

$mswd$concordance
         [,1]
[1,] 84.02125


$p.value
$p.value$equivalence
     [,1]
[1,]    0

$p.value$concordance
     [,1]
[1,]    0


attr(,"class")
[1] "wetherill"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("age", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("agespectrum")
> ### * agespectrum
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: agespectrum
> ### Title: Plot a (40Ar/39Ar) release spectrum
> ### Aliases: agespectrum agespectrum.default agespectrum.ArAr
> 
> ### ** Examples
> 
> data(examples)
> agespectrum(examples$ArAr,ylim=c(0,80))
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("agespectrum", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("cad")
> ### * cad
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: cad
> ### Title: Plot continuous data as cumulative age distributions
> ### Aliases: cad cad.default cad.detritals cad.UPb cad.PbPb cad.ArAr
> ###   cad.ReOs cad.SmNd cad.RbSr cad.LuHf cad.UThHe cad.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> cad(examples$DZ,verticals=FALSE,pch=20)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("cad", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("central")
> ### * central
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: central
> ### Title: Calculate U-Th-He and fission track central ages and
> ###   compositions
> ### Aliases: central central.default central.UThHe central.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> print(central(examples$UThHe)$age)
         U            
6.40800509 0.05909253 
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("central", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("concordia")
> ### * concordia
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: concordia
> ### Title: Concordia diagram
> ### Aliases: concordia
> 
> ### ** Examples
> 
> data(examples) 
> concordia(examples$UPb)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("concordia", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ellipse")
> ### * ellipse
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ellipse
> ### Title: Get coordinates of error ellipse for plotting
> ### Aliases: ellipse
> 
> ### ** Examples
> 
> x = 99; y = 101;
> covmat <- matrix(c(1,0.9,0.9,1),nrow=2)
> ell <- ellipse(x,y,covmat)
> plot(c(90,110),c(90,110),type='l')
> polygon(ell,col=rgb(0,1,0,0.5))
> points(x,y,pch=21,bg='black')
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ellipse", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("examples")
> ### * examples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: examples
> ### Title: Example datasets for testing 'IsoplotR'
> ### Aliases: examples
> 
> ### ** Examples
> 
> data(examples)
> 
> concordia(examples$UPb)
> 
> agespectrum(examples$ArAr)
> 
> isochron(examples$ReOs)
> 
> radialplot(examples$FT1)
> 
> helioplot(examples$UThHe)
> 
> kde(examples$Namib)
> 
> radialplot(examples$MountTom)
> 
> agespectrum(examples$spectrum)
> 
> weightedmean(examples$average)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("examples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("helioplot")
> ### * helioplot
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: helioplot
> ### Title: Visualise U-Th-He data on a logratio plot or ternary diagram
> ### Aliases: helioplot
> 
> ### ** Examples
> 
> data(examples)
> helioplot(examples$UThHe)
> dev.new()
> helioplot(examples$UThHe,logratio=FALSE)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("helioplot", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("isochron")
> ### * isochron
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: isochron
> ### Title: Calculate and plot isochrons
> ### Aliases: isochron isochron.default isochron.ArAr isochron.PbPb
> ###   isochron.RbSr isochron.ReOs isochron.SmNd isochron.LuHf isochron.ThU
> 
> ### ** Examples
> 
> data(examples)
> isochron(examples$ArAr)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("isochron", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("kde")
> ### * kde
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: kde
> ### Title: Create (a) kernel density estimate(s)
> ### Aliases: kde kde.default kde.UPb kde.detritals kde.PbPb kde.ArAr
> ###   kde.ReOs kde.SmNd kde.RbSr kde.LuHf kde.UThHe kde.fissiontracks
> 
> ### ** Examples
> 
> data(examples)
> kde(examples$DZ[['N1']],kernel="epanechnikov")
> kde(examples$DZ,from=0,to=3000)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("kde", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mds")
> ### * mds
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mds
> ### Title: Multidimensional Scaling
> ### Aliases: mds mds.default mds.detritals
> 
> ### ** Examples
> 
> data(examples)
> # Parameters 'xaxt' and 'yaxt' control if the axis is plotted at all.
> mds(examples$DZ,nnlines=TRUE,cex=5,xaxt='n',yaxt='n')

 *** caught segfault ***
address 0x5, cause 'memory not mapped'

Traceback:
 1: dyn.load(file, DLLpath = DLLpath, ...)
 2: library.dynam(lib, package, package.lib)
 3: loadNamespace(name)
 4: doTryCatch(return(expr), name, parentenv, handler)
 5: tryCatchOne(expr, names, parentenv, handlers[[1L]])
 6: tryCatchList(expr, classes, parentenv, handlers)
 7: tryCatch(loadNamespace(name), error = function(e) stop(e))
 8: getNamespace(ns)
 9: asNamespace(ns)
10: getExportedValue(pkg, name)
11: MASS::isoMDS
12: mds.default(d, classical = classical, plot = plot, shepard = shepard,     nnlines = nnlines, pch = pch, pos = pos, cex.symbols = cex.symbols,     col = col, bg = bg, xlab = xlab, ylab = ylab, ...)
13: mds.detritals(examples$DZ, nnlines = TRUE, cex = 5, xaxt = "n",     yaxt = "n")
14: mds(examples$DZ, nnlines = TRUE, cex = 5, xaxt = "n", yaxt = "n")
An irrecoverable exception occurred. R is aborting now ...
Segmentation fault (core dumped)
