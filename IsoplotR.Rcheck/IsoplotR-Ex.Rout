
R Under development (unstable) (2016-01-21 r69971) -- "Unsuffered Consequences"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "IsoplotR"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "IsoplotR-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('IsoplotR')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("I.A")
> ### * I.A
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: I.A
> ### Title: Isotope abundance
> ### Aliases: I.A
> 
> ### ** Examples
> 
> print(I.A('U238')$x)
     U238 
0.9927963 
> # use the 238U/235U ratio of Steiger and Jaeger (1977)
> U238U235(138.88,0)
> print(I.A('U238')$x)
    U238 
0.992851 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("I.A", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("U238U235")
> ### * U238U235
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: U238U235
> ### Title: 238U/235 ratio
> ### Aliases: U238U235
> 
> ### ** Examples
> 
> print(U238U235()$x)
[1] 138.88
> # use the 238U/235U ratio of Steiger and Jaeger (1977)
> U238U235(138.88,0)
> print(U238U235()$x)
[1] 138.88
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("U238U235", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("UPb")
> ### * UPb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: UPb
> ### Title: An example U-Pb dataset
> ### Aliases: UPb
> 
> ### ** Examples
> 
> data(UPb)
Warning in data(UPb) : data set ‘UPb’ not found
> concordia.plot(UPb)
Error in get.concordia.limits(X, limits, wetherill) : 
  object 'UPb' not found
Calls: concordia.plot -> concordia.line -> get.concordia.limits
Execution halted
