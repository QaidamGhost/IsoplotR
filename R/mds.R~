#' Multidimensional Scaling
#'
#' Performs classical or nonmetric Multidimensional Scaling analysis
#' @param x a dissimilarity matrix OR an object of class
#'     \code{detrital}
#' @param classical boolean flag indicating whether classical (TRUE)
#'     or nonmetric (FALSE) MDS should be used
#' @param plot show the MDS configuration as a plot
#' @param ... optional arguments.
#' @return if \code{plot=FALSE}, returns an object of class
#'     \code{MDS}, i.e. a list containing the following items:
#'
#' \code{points}: a two column vector of the fitted configuration
#'
#' \code{classical}: a boolean flag indicating whether the MDS
#' configuration was obtained by classical (\code{TRUE}) or nonmetric
#' (\code{FALSE}) MDS.
#'
#' \code{diss}: the dissimilarity matrix used for the MDS analysis
#' 
#' \code{stress}: (only if \code{classical=TRUE}) the final stress
#' achieved (in percent)
#' @examples
#' data(examples)
#' mds(examples$DZ)
#' @rdname mds
#' @importFrom MASS isoMDS
#' @export
mds <- function(x,...){ UseMethod("mds",x) }
#' @rdname mds
#' @export
mds.default <- function(x,classical=FALSE,...){
    
}
#' @rdname MDS
#' @export
mds.detrital <- function(x,classical=FALSE,...){
    d <- diss.distributional(x,...)
    out <- list()
    if (classical){
        out$points <- stats::cmdscale(x)
    } else {
        out <- MASS::isoMDS(d=x,...)
    }
    out$classical <- classical
    out$diss <- x
    class(out) <- "MDS"
    return(out)
}

# x is an object of class detrital
diss <- function(x) {
    n <- length(x$x)
    d <- mat.or.vec(n,n)
    rownames(d) <- names(x$x)
    colnames(d) <- names(x$x)
    for (i in 1:n){
        for (j in 1:n){
            d[i,j] <- KS.diss(x$x[[i]],x$x[[j]])
        }
    }
    stats::as.dist(d)
}
